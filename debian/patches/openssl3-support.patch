diff --git a/lib/compat/openssl_support.c b/lib/compat/openssl_support.c
index bc70402..9cec9ea 100644
--- a/lib/compat/openssl_support.c
+++ b/lib/compat/openssl_support.c
@@ -185,6 +185,7 @@ void openssl_ctx_setup_ecdh(SSL_CTX *ctx)
 }
 
 #if !SYSLOG_NG_HAVE_DECL_DH_SET0_PQG
+#if OPENSSL_VERSION_NUMBER < 0x30000000L
 int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g)
 {
   if ((dh->p == NULL && p == NULL)
@@ -213,6 +214,7 @@ int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g)
   return 1;
 }
 #endif
+#endif
 
 #if !SYSLOG_NG_HAVE_DECL_BN_GET_RFC3526_PRIME_2048
 BIGNUM *
diff --git a/lib/compat/openssl_support.h b/lib/compat/openssl_support.h
index 7ee6f0b..7b92245 100644
--- a/lib/compat/openssl_support.h
+++ b/lib/compat/openssl_support.h
@@ -55,8 +55,10 @@ uint32_t X509_get_extension_flags(X509 *x);
 #endif
 
 #if !SYSLOG_NG_HAVE_DECL_DH_SET0_PQG
+#if OPENSSL_VERSION_NUMBER < 0x30000000L
 int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g);
 #endif
+#endif
 
 #if !SYSLOG_NG_HAVE_DECL_BN_GET_RFC3526_PRIME_2048
 BIGNUM *BN_get_rfc3526_prime_2048(BIGNUM *bn);
diff --git a/lib/tlscontext.c b/lib/tlscontext.c
index 5ba3e12..7dff2f1 100644
--- a/lib/tlscontext.c
+++ b/lib/tlscontext.c
@@ -35,7 +35,9 @@
 #include <openssl/err.h>
 #include <openssl/rand.h>
 #include <openssl/dh.h>
+#include <openssl/evp.h>
 #include <openssl/bn.h>
+#include <openssl/pem.h>
 #include <openssl/pkcs12.h>
 
 struct _TLSContext
@@ -299,7 +301,11 @@
   TLSSession *self = (TLSSession *)SSL_get_app_data(ssl);
   if( !self->peer_info.found && where == (SSL_ST_ACCEPT|SSL_CB_LOOP) )
     {
+#if OPENSSL_VERSION_NUMBER < 0x30000000L
       X509 *cert = SSL_get_peer_certificate(ssl);
+#else
+      X509 *cert = SSL_get1_peer_certificate(ssl);
+#endif
 
       if(cert)
         {
@@ -373,9 +379,8 @@ tls_context_format_tls_error_tag(TLSContext *self)
 {
   gint ssl_error = ERR_get_error();
 
-  return evt_tag_printf("tls_error", "%s:%s:%s",
+  return evt_tag_printf("tls_error", "%s:%s",
                         ERR_lib_error_string(ssl_error),
-                        ERR_func_error_string(ssl_error),
                         ERR_reason_error_string(ssl_error));
 }
 
@@ -497,25 +502,43 @@ _set_optional_ecdh_curve_list(SSL_CTX *ctx, const gchar *ecdh_curve_list)
 }
 
 static gboolean
-_is_dh_valid(DH *dh)
+_is_dh_valid(EVP_PKEY *pkey)
 {
+  if (!pkey)
+    return FALSE;
+
+#if OPENSSL_VERSION_NUMBER < 0x30000000L
+  DH *dh = EVP_PKEY_get1_DH(pkey);
   if (!dh)
     return FALSE;
 
   gint check_flags;
-  if (!DH_check(dh, &check_flags))
+  if (!DH_check(dh, &check_flags)) {
+    DH_free(dh);
     return FALSE;
+  }
+  DH_free(dh);
 
   gboolean error_flag_is_set = check_flags &
                                (DH_CHECK_P_NOT_PRIME
                                 | DH_UNABLE_TO_CHECK_GENERATOR
                                 | DH_CHECK_P_NOT_SAFE_PRIME
                                 | DH_NOT_SUITABLE_GENERATOR);
-
   return !error_flag_is_set;
+#else
+  EVP_PKEY_CTX *ctx = EVP_PKEY_CTX_new(pkey, NULL);
+  if (!ctx)
+    return FALSE;
+
+  gboolean valid = (EVP_PKEY_param_check(ctx) == 1);
+
+  EVP_PKEY_CTX_free(ctx);
+
+  return valid;
+#endif
 }
 
-static DH *
+static EVP_PKEY *
 _load_dh_from_file(TLSContext *self, const gchar *dhparam_file)
 {
   if (!_is_file_accessible(self, dhparam_file))
@@ -525,7 +548,7 @@ _load_dh_from_file(TLSContext *self, const gchar *dhparam_file)
   if (!bio)
     return NULL;
 
-  DH *dh = PEM_read_bio_DHparams(bio, NULL, NULL, NULL);
+  EVP_PKEY *dh = PEM_read_bio_Parameters(bio, NULL);
   BIO_free(bio);
 
   if (!_is_dh_valid(dh))
@@ -533,15 +556,16 @@ _load_dh_from_file(TLSContext *self, const gchar *dhparam_file)
       msg_error("Error setting up TLS session context, invalid DH parameters",
                 evt_tag_str("dhparam_file", dhparam_file));
 
-      DH_free(dh);
+      EVP_PKEY_free(dh);
       return NULL;
     }
 
   return dh;
 }
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static DH *
-_load_dh_fallback(TLSContext *self)
+_load_dh_fallback(void)
 {
   DH *dh = DH_new();
 
@@ -568,6 +592,7 @@ _load_dh_fallback(TLSContext *self)
 
   return dh;
 }
+#endif
 
 static gboolean
 tls_context_setup_ecdh(TLSContext *self)
@@ -587,14 +612,37 @@ tls_context_setup_ecdh(TLSContext *self)
 static gboolean
 tls_context_setup_dh(TLSContext *self)
 {
-  DH *dh = self->dhparam_file ? _load_dh_from_file(self, self->dhparam_file) : _load_dh_fallback(self);
+  gboolean ctx_dh_success = FALSE;
 
-  if (!dh)
-    return FALSE;
+  if (self->dhparam_file) {
+    EVP_PKEY *pkey = _load_dh_from_file(self, self->dhparam_file);
 
-  gboolean ctx_dh_success = SSL_CTX_set_tmp_dh(self->ssl_ctx, dh);
+    if (!pkey)
+      return FALSE;
 
-  DH_free(dh);
+#if OPENSSL_VERSION_NUMBER < 0x30000000L
+    DH *dh = EVP_PKEY_get1_DH(pkey);
+    if (!dh)
+      return FALSE;
+    ctx_dh_success = (SSL_CTX_set_tmp_dh(self->ssl_ctx, dh) == 1);
+    DH_free(dh);
+    EVP_PKEY_free(pkey);
+#else
+    ctx_dh_success = (SSL_CTX_set0_tmp_dh_pkey(self->ssl_ctx, pkey) == 1);
+    if (!ctx_dh_success)
+      EVP_PKEY_free(pkey);
+#endif
+  } else {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+    DH *dh = _load_dh_fallback();
+    if (!dh)
+      return FALSE;
+    ctx_dh_success = (SSL_CTX_set_tmp_dh(self->ssl_ctx, dh) == 1);
+    DH_free(dh);
+#else
+    ctx_dh_success = (SSL_CTX_set_dh_auto(self->ssl_ctx, 1) == 1);
+#endif
+  }
   return ctx_dh_success;
 }
 
diff --git a/modules/afsql/afsql.c b/modules/afsql/afsql.c
index 3369686..11ca8f4 100644
--- a/modules/afsql/afsql.c
+++ b/modules/afsql/afsql.c
@@ -37,6 +37,7 @@
 #include <string.h>
 #include <errno.h>
 #include <openssl/md5.h>
+#include <openssl/evp.h>
 
 static gboolean dbi_initialized = FALSE;
 static const char *s_oracle = "oracle";
@@ -391,7 +392,11 @@ afsql_dd_create_index(AFSqlDestDriver *self, const gchar *table, const gchar *co
           gchar hash_str[31];
           gchar *cat = g_strjoin("_", table, column, NULL);
 
+#if OPENSSL_VERSION_NUMBER < 0x30000000L
           MD5((guchar *)cat, strlen(cat), hash);
+#else
+          EVP_Q_digest(NULL, "MD5", NULL, cat, strlen(cat), hash, NULL);
+#endif
           g_free(cat);
 
           format_hex_string(hash, sizeof(hash), hash_str, sizeof(hash_str));
diff --git a/modules/secure-logging/slog.c b/modules/secure-logging/slog.c
index 68cd4ae..3b38059 100644
--- a/modules/secure-logging/slog.c
+++ b/modules/secure-logging/slog.c
@@ -420,15 +420,19 @@ gchar *convertToBase64(unsigned char *input, gsize len)
  */
 void cmac(unsigned char *key, const void *input, gsize length, unsigned char *out, gsize *outlen)
 {
+  size_t outsize;
+#if OPENSSL_VERSION_NUMBER < 0x30000000L
   CMAC_CTX *ctx = CMAC_CTX_new();
 
   CMAC_Init(ctx, key, KEY_LENGTH, EVP_aes_256_cbc(), NULL);
   CMAC_Update(ctx, input, length);
-
-  size_t outsize;
   CMAC_Final(ctx, out, &outsize);
-  *outlen = outsize;
   CMAC_CTX_free(ctx);
+#else
+  EVP_Q_mac(NULL, "CMAC", NULL, "AES-256-CBC", NULL, key, KEY_LENGTH,
+      input, length, out, CMAC_LENGTH, &outsize);
+#endif
+  *outlen = outsize;
 }
 
 
