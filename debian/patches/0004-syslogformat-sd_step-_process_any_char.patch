From: Kokan <kokaipeter@gmail.com>
Date: Fri, 24 Jul 2020 11:11:19 +0200
Subject: syslogformat: sd_step -> _process_any_char

Signed-off-by: Kokan <kokaipeter@gmail.com>
Origin: https://github.com/syslog-ng/syslog-ng/commit/4117b4b7eaaed215295e0e3bff6e8f6dc9c1842b
---
 modules/syslogformat/syslog-format.c | 60 ++++++++++++++++++------------------
 1 file changed, 30 insertions(+), 30 deletions(-)

diff --git a/modules/syslogformat/syslog-format.c b/modules/syslogformat/syslog-format.c
index d81c74e..da70d63 100644
--- a/modules/syslogformat/syslog-format.c
+++ b/modules/syslogformat/syslog-format.c
@@ -48,7 +48,7 @@ static struct
 } handles;
 
 static inline gboolean
-sd_step(const guchar **data, gint *left)
+_process_any_char(const guchar **data, gint *left)
 {
   if (*left < 1)
     return FALSE;
@@ -70,7 +70,7 @@ log_msg_parse_pri(LogMessage *self, const guchar **data, gint *length, guint fla
 
   if (left && src[0] == '<')
     {
-      sd_step(&src, &left);
+      _process_any_char(&src, &left);
       pri = 0;
       while (left && *src != '>')
         {
@@ -82,12 +82,12 @@ log_msg_parse_pri(LogMessage *self, const guchar **data, gint *length, guint fla
             {
               return FALSE;
             }
-          sd_step(&src, &left);
+          _process_any_char(&src, &left);
         }
       self->pri = pri;
       if (left)
         {
-          sd_step(&src, &left);
+          _process_any_char(&src, &left);
         }
     }
   /* No priority info in the buffer? Just assign a default. */
@@ -110,7 +110,7 @@ log_msg_parse_skip_chars(LogMessage *self, const guchar **data, gint *length, co
 
   while (max_len && left && _strchr_optimized_for_single_char_haystack(chars, *src))
     {
-      sd_step(&src, &left);
+      _process_any_char(&src, &left);
       num_skipped++;
       if (max_len >= 0)
         max_len--;
@@ -128,7 +128,7 @@ log_msg_parse_skip_space(LogMessage *self, const guchar **data, gint *length)
 
   if (left > 0 && *src == ' ')
     {
-      sd_step(&src, &left);
+      _process_any_char(&src, &left);
     }
   else
     {
@@ -149,7 +149,7 @@ log_msg_parse_skip_chars_until(LogMessage *self, const guchar **data, gint *leng
 
   while (left && _strchr_optimized_for_single_char_haystack(delims, *src) == 0)
     {
-      sd_step(&src, &left);
+      _process_any_char(&src, &left);
       num_skipped++;
     }
   *data = src;
@@ -199,9 +199,9 @@ log_msg_parse_cisco_sequence_id(LogMessage *self, const guchar **data, gint *len
     {
       if (!isdigit(*src))
         return;
-      sd_step(&src, &left);
+      _process_any_char(&src, &left);
     }
-  sd_step(&src, &left);
+  _process_any_char(&src, &left);
 
   /* if the next char is not space, then we may try to read a date */
 
@@ -227,13 +227,13 @@ log_msg_parse_cisco_timestamp_attributes(LogMessage *self, const guchar **data,
     {
       if (!(parse_flags & LP_NO_PARSE_DATE))
         log_msg_set_value(self, handles.is_synced, "0", 1);
-      sd_step(&src, &left);
+      _process_any_char(&src, &left);
     }
   else if (G_UNLIKELY(src[0] == '.'))
     {
       if (!(parse_flags & LP_NO_PARSE_DATE))
         log_msg_set_value(self, handles.is_synced, "1", 1);
-      sd_step(&src, &left);
+      _process_any_char(&src, &left);
     }
   *data = src;
   *length = left;
@@ -303,7 +303,7 @@ log_msg_parse_version(LogMessage *self, const guchar **data, gint *length)
         {
           return FALSE;
         }
-      sd_step(&src, &left);
+      _process_any_char(&src, &left);
     }
   if (version != 1)
     return FALSE;
@@ -325,7 +325,7 @@ log_msg_parse_legacy_program_name(LogMessage *self, const guchar **data, gint *l
   prog_start = src;
   while (left && *src != ' ' && *src != '[' && *src != ':')
     {
-      sd_step(&src, &left);
+      _process_any_char(&src, &left);
     }
   log_msg_set_value(self, LM_V_PROGRAM, (gchar *) prog_start, src - prog_start);
   if (left > 0 && *src == '[')
@@ -333,7 +333,7 @@ log_msg_parse_legacy_program_name(LogMessage *self, const guchar **data, gint *l
       const guchar *pid_start = src + 1;
       while (left && *src != ' ' && *src != ']' && *src != ':')
         {
-          sd_step(&src, &left);
+          _process_any_char(&src, &left);
         }
       if (left)
         {
@@ -341,16 +341,16 @@ log_msg_parse_legacy_program_name(LogMessage *self, const guchar **data, gint *l
         }
       if (left > 0 && *src == ']')
         {
-          sd_step(&src, &left);
+          _process_any_char(&src, &left);
         }
     }
   if (left > 0 && *src == ':')
     {
-      sd_step(&src, &left);
+      _process_any_char(&src, &left);
     }
   if (left > 0 && *src == ' ')
     {
-      sd_step(&src, &left);
+      _process_any_char(&src, &left);
     }
   if ((flags & LP_STORE_LEGACY_MSGHDR))
     {
@@ -464,7 +464,7 @@ log_msg_parse_hostname(LogMessage *self, const guchar **data, gint *length,
           break;
         }
       hostname_buf[dst++] = *src;
-      sd_step(&src, &left);
+      _process_any_char(&src, &left);
     }
   hostname_buf[dst] = 0;
 
@@ -543,11 +543,11 @@ log_msg_parse_sd(LogMessage *self, const guchar **data, gint *length, const MsgF
   if (left && src[0] == '-')
     {
       /* Nothing to do here */
-      sd_step(&src, &left);
+      _process_any_char(&src, &left);
     }
   else if (left && src[0] == '[')
     {
-      sd_step(&src, &left);
+      _process_any_char(&src, &left);
       open_sd++;
       do
         {
@@ -574,7 +574,7 @@ log_msg_parse_sd(LogMessage *self, const guchar **data, gint *length, const MsgF
                 {
                   goto error;
                 }
-              sd_step(&src, &left);
+              _process_any_char(&src, &left);
             }
 
           if (pos == 0)
@@ -598,7 +598,7 @@ log_msg_parse_sd(LogMessage *self, const guchar **data, gint *length, const MsgF
           while (left && *src != ']')
             {
               if (left && *src == ' ') /* skip the ' ' before the parameter name */
-                sd_step(&src, &left);
+                _process_any_char(&src, &left);
               else
                 goto error;
 
@@ -623,14 +623,14 @@ log_msg_parse_sd(LogMessage *self, const guchar **data, gint *length, const MsgF
                     {
                       goto error;
                     }
-                  sd_step(&src, &left);
+                  _process_any_char(&src, &left);
                 }
               sd_param_name[pos] = 0;
               strncpy(&sd_value_name[logmsg_sd_prefix_len + 1 + sd_id_len], sd_param_name,
                       sizeof(sd_value_name) - logmsg_sd_prefix_len - 1 - sd_id_len);
 
               if (left && *src == '=')
-                sd_step(&src, &left);
+                _process_any_char(&src, &left);
               else
                 goto error;
 
@@ -640,7 +640,7 @@ log_msg_parse_sd(LogMessage *self, const guchar **data, gint *length, const MsgF
                 {
                   gboolean quote = FALSE;
                   /* opening quote */
-                  sd_step(&src, &left);
+                  _process_any_char(&src, &left);
                   pos = 0;
 
                   while (left && (*src != '"' || quote))
@@ -658,7 +658,7 @@ log_msg_parse_sd(LogMessage *self, const guchar **data, gint *length, const MsgF
                             }
                           else if (!quote &&  *src == ']')
                             {
-                              sd_step(&src, &left);
+                              _process_any_char(&src, &left);
                               goto error;
                             }
                           if (pos < sizeof(sd_param_value) - 1)
@@ -668,13 +668,13 @@ log_msg_parse_sd(LogMessage *self, const guchar **data, gint *length, const MsgF
                             }
                           quote = FALSE;
                         }
-                      sd_step(&src, &left);
+                      _process_any_char(&src, &left);
                     }
                   sd_param_value[pos] = 0;
                   sd_param_value_len = pos;
 
                   if (left && *src == '"')/* closing quote */
-                    sd_step(&src, &left);
+                    _process_any_char(&src, &left);
                   else
                     goto error;
                 }
@@ -688,7 +688,7 @@ log_msg_parse_sd(LogMessage *self, const guchar **data, gint *length, const MsgF
 
           if (left && *src == ']')
             {
-              sd_step(&src, &left);
+              _process_any_char(&src, &left);
               open_sd--;
             }
           else
@@ -700,7 +700,7 @@ log_msg_parse_sd(LogMessage *self, const guchar **data, gint *length, const MsgF
           if (left && *src == '[')
             {
               /* new structured data begins, thus continue iteration */
-              sd_step(&src, &left);
+              _process_any_char(&src, &left);
               open_sd++;
             }
         }
