/*
 * Copyright (c) 2002-2010 BalaBit IT Ltd, Budapest, Hungary
 * Copyright (c) 1998-2010 Bal√°zs Scheidler
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As an additional exemption you are allowed to compile & link against the
 * OpenSSL libraries as published by the OpenSSL project. See the file
 * COPYING for details.
 *
 */

%code top {
#include "affile-parser.h"

}


%code {

#include "affile.h"
#include "cfg-parser.h"
#include "affile-grammar.h"
#include "syslog-names.h"
#include "messages.h"
#include "plugin.h"

#include <string.h>

}

%name-prefix "affile_"

/* this parameter is needed in order to instruct bison to use a complete
 * argument list for yylex/yyerror */

%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {LogDriver **instance}
%parse-param {gpointer arg}

/* INCLUDE_DECLS */

%token KW_PIPE

%token KW_FSYNC
%token KW_FOLLOW_FREQ
%token KW_OVERWRITE_IF_OLDER

%type	<ptr> source_affile
%type	<ptr> source_affile_params
%type	<ptr> source_afpipe_params
%type   <ptr> dest_affile
%type	<ptr> dest_affile_params
%type   <ptr> dest_afpipe_params


%%

start
        : LL_CONTEXT_SOURCE source_affile                        { YYACCEPT; }
	| LL_CONTEXT_DESTINATION dest_affile			 { YYACCEPT; }
        ;

source_affile
	: KW_FILE '(' source_affile_params ')'	{ $$ = $3; }
	| KW_PIPE '(' source_afpipe_params ')'	{ $$ = $3; }
	;

source_affile_params
	: string
	  {
            last_driver = *instance = affile_sd_new($1, 0);
	    free($1);
	    last_reader_options = &((AFFileSourceDriver *) last_driver)->reader_options;
	  }
          source_affile_options                 { $$ = last_driver; }
        ;

source_affile_options
        : source_affile_option source_affile_options
        |
        ;

source_affile_option
	: KW_FOLLOW_FREQ '(' LL_FLOAT ')'		{ last_reader_options->follow_freq = (long) ($3 * 1000); }
	| KW_FOLLOW_FREQ '(' LL_NUMBER ')'		{ last_reader_options->follow_freq = ($3 * 1000); }
        | source_reader_option
        ;


source_afpipe_params
	: string
	  {
	    last_driver = *instance = affile_sd_new($1, AFFILE_PIPE);
	    free($1);
	    last_reader_options = &((AFFileSourceDriver *) last_driver)->reader_options;
	  }
	  source_afpipe_options				{ $$ = last_driver; }
	;

source_afpipe_options
        : source_afpipe_option source_afpipe_options
        |
        ;

source_afpipe_option
	: KW_OPTIONAL '(' yesno ')'			{ last_driver->optional = $3; }
	| source_reader_option
	;

dest_affile
	: KW_FILE '(' dest_affile_params ')'	{ $$ = $3; }
	| KW_PIPE '(' dest_afpipe_params ')'    { $$ = $3; }
	;

dest_affile_params
	: string
	  {
	    last_driver = *instance = affile_dd_new($1, 0);
	    free($1);
	    last_writer_options = &((AFFileDestDriver *) last_driver)->writer_options;
	  }
	  dest_affile_options                           { $$ = last_driver; }
	;

dest_affile_options
	: dest_affile_option dest_affile_options
        |
	;

dest_affile_option
	: dest_writer_option
	| dest_driver_option
	| KW_OPTIONAL '(' yesno ')'		{ last_driver->optional = $3; }
	| KW_OWNER '(' string_or_number ')'	{ affile_dd_set_file_uid(last_driver, $3); free($3); }
	| KW_OWNER '(' ')'	                { affile_dd_set_file_uid(last_driver, "-2"); }
	| KW_GROUP '(' string_or_number ')'	{ affile_dd_set_file_gid(last_driver, $3); free($3); }
	| KW_GROUP '(' ')'	                { affile_dd_set_file_gid(last_driver, "-2"); }
	| KW_PERM '(' LL_NUMBER ')'		{ affile_dd_set_file_perm(last_driver, $3); }
	| KW_PERM '(' ')'		        { affile_dd_set_file_perm(last_driver, -2); }
	| KW_DIR_OWNER '(' string_or_number ')'	{ affile_dd_set_dir_uid(last_driver, $3); free($3); }
	| KW_DIR_OWNER '(' ')'	                { affile_dd_set_dir_uid(last_driver, "-2"); }
	| KW_DIR_GROUP '(' string_or_number ')'	{ affile_dd_set_dir_gid(last_driver, $3); free($3); }
	| KW_DIR_GROUP '(' ')'	                { affile_dd_set_dir_gid(last_driver, "-2"); }
	| KW_DIR_PERM '(' LL_NUMBER ')'		{ affile_dd_set_dir_perm(last_driver, $3); }
	| KW_DIR_PERM '(' ')'		        { affile_dd_set_dir_perm(last_driver, -2); }
	| KW_CREATE_DIRS '(' yesno ')'		{ affile_dd_set_create_dirs(last_driver, $3); }
	| KW_OVERWRITE_IF_OLDER '(' LL_NUMBER ')'	{ affile_dd_set_overwrite_if_older(last_driver, $3); }
	| KW_FSYNC '(' yesno ')'		{ affile_dd_set_fsync(last_driver, $3); }
	| KW_LOCAL_TIME_ZONE '(' string ')'     { affile_dd_set_local_time_zone(last_driver, $3); free($3); }
	;

dest_afpipe_params
	: string
	  {
	    last_driver = *instance = affile_dd_new($1, AFFILE_PIPE);
	    free($1);
	    last_writer_options = &((AFFileDestDriver *) last_driver)->writer_options;
	  }
	  dest_afpipe_options                   { $$ = last_driver; }
	;

dest_afpipe_options
	: dest_afpipe_option dest_afpipe_options
	|
	;

dest_afpipe_option
	: dest_writer_option
	| dest_driver_option
	| KW_OWNER '(' string_or_number ')'	{ affile_dd_set_file_uid(last_driver, $3); free($3); }
	| KW_OWNER '(' ')'	                { affile_dd_set_file_uid(last_driver, "-2"); }
	| KW_GROUP '(' string_or_number ')'	{ affile_dd_set_file_gid(last_driver, $3); free($3); }
	| KW_GROUP '(' ')'	                { affile_dd_set_file_gid(last_driver, "-2"); }
	| KW_PERM '(' LL_NUMBER ')'		{ affile_dd_set_file_perm(last_driver, $3); }
	| KW_PERM '(' ')'		        { affile_dd_set_file_perm(last_driver, -2); }
	;


/* INCLUDE_RULES */

%%
