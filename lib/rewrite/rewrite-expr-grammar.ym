/*
 * Copyright (c) 2002-2012 BalaBit IT Ltd, Budapest, Hungary
 * Copyright (c) 1998-2012 Bal√°zs Scheidler
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As an additional exemption you are allowed to compile & link against the
 * OpenSSL libraries as published by the OpenSSL project. See the file
 * COPYING for details.
 *
 */

%code requires {

#include "rewrite/rewrite-expr-parser.h"

}

%code {

#include "rewrite/rewrite-expr-grammar.h"
#include "rewrite/rewrite-set-tag.h"
#include "rewrite/rewrite-set.h"
#include "rewrite/rewrite-subst.h"
#include "filter/filter-expr.h"
#include "filter/filter-expr-parser.h"
#include "cfg-grammar.h"
#include "syslog-names.h"
#include "plugin.h"

#include <string.h>

LogRewrite *last_rewrite;

}

%name-prefix "rewrite_expr_"
%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {LogExprNode **result}
%parse-param {gpointer arg}

%type   <ptr> rewrite_expr
%type   <ptr> rewrite_expr_list
%type   <ptr> rewrite_template_content

/* INCLUDE_DECLS */

%token KW_CONDITION
%token KW_SET_TAG
%token KW_CLEAR_TAG

%%

start
        : rewrite_expr_list log_last_junction        { *result = log_expr_node_append_tail($1, $2); if (yychar != YYEMPTY) { cfg_lexer_unput_token(lexer, &yylval); } YYACCEPT; }
	;

rewrite_expr_list
        : rewrite_expr semicolons rewrite_expr_list  { $$ = log_expr_node_append_tail(log_expr_node_new_pipe($1, &@1), $3); }
        | log_junction semicolons rewrite_expr_list      { $$ = log_expr_node_append_tail($1,  $3); }
        |                                           { $$ = NULL; }
        ;

rewrite_template_content
	: string
	  {
	    GError *error = NULL;

	    $$ = log_template_new(configuration, $1);
	    CHECK_ERROR(log_template_compile($$, $1, &error), @1, "Error compiling template (%s)", error->message);
	    free($1);
	  }
	;

rewrite_expr
        : KW_SUBST '(' string rewrite_template_content
          {
            last_rewrite = log_rewrite_subst_new($4);
            log_template_unref($4);
          }
          rewrite_subst_opts ')'
          {
            CHECK_ERROR(log_rewrite_subst_set_regexp(last_rewrite, $3), @3, "Error compiling regular expression");
            free($3);
            $$ = last_rewrite;
          }
        | KW_SET '(' rewrite_template_content
          {
            last_rewrite = log_rewrite_set_new($3);
            log_template_unref($3);
          }
          rewrite_expr_opts ')'                 { $$ = last_rewrite; }
	| KW_SET_TAG '(' string ')'             { $$ = log_rewrite_set_tag_new($3, TRUE); free($3); }
	| KW_CLEAR_TAG '(' string ')'           { $$ = log_rewrite_set_tag_new($3, FALSE); free($3); }
        | LL_IDENTIFIER
          {
            Plugin *p;
            gint context = LL_CONTEXT_REWRITE;

            p = plugin_find(configuration, context, $1);
            CHECK_ERROR(p, @1, "%s plugin %s not found", cfg_lexer_lookup_context_name_by_type(context), $1);

            last_rewrite = (LogRewrite *) plugin_parse_config(p, configuration, &@1, NULL);
            free($1);
            if (!last_rewrite)
              {
                YYERROR;
              }
            $$ = last_rewrite;
          }
        ;

rewrite_subst_opts
        : rewrite_expr_opt rewrite_subst_opts
        | rewrite_subst_opt rewrite_subst_opts
        |
        ;

rewrite_subst_opt
        : KW_TYPE '(' string ')'
          {
            CHECK_ERROR((strcmp($3, "glob") != 0), @3, "Rewrite rules do not support glob expressions");
            log_rewrite_subst_set_matcher(last_rewrite, log_matcher_new($3));
            free($3);
          }
        | KW_FLAGS '(' regexp_option_flags ')' { log_rewrite_subst_set_flags(last_rewrite, $3); }
        ;

rewrite_expr_opts
        : rewrite_expr_opt rewrite_expr_opts
        |
        ;

rewrite_expr_opt
        : KW_VALUE '(' string ')'
          {
            const gchar *p = $3;
            if (p[0] == '$')
              {
                msg_warning("Value references in rewrite rules should not use the '$' prefix, those are only needed in templates",
                            evt_tag_str("value", $3),
                            NULL);
                p++;
              }
            last_rewrite->value_handle = log_msg_get_value_handle(p);
            CHECK_ERROR(!log_msg_is_handle_macro(last_rewrite->value_handle), @3, "%s is read-only, it cannot be changed in rewrite rules", p);
	    CHECK_ERROR(log_msg_is_value_name_valid(p), @3, "%s is not a valid name for a name-value pair, perhaps a misspelled .SDATA reference?", p);
            free($3);
          }
        | KW_CONDITION '('
          {
            FilterExprNode *filter_expr;

            CHECK_ERROR(cfg_parser_parse(&filter_expr_parser, lexer, (gpointer *) &filter_expr, NULL), @1, NULL);
            log_rewrite_set_condition(last_rewrite, filter_expr);
          } ')'
        ;

/* INCLUDE_RULES */

%%
